// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Person {
  id            Int         @id @default(autoincrement())
  walletAddress String      @unique
  tgId          String      @unique
  roles         UserRole[]
  WhiteList     WhiteList[]
  events        Event[]
}

model UserRole {
  id       Int    @id @default(autoincrement())
  person   Person @relation(fields: [personID], references: [id])
  personID Int
  role     Role   @relation(fields: [roleID], references: [id])
  roleID   Int
}

model Role {
  id    Int        @id @default(autoincrement())
  name  String
  roles UserRole[]
}

model NftList {
  id          Int       @id @default(autoincrement())
  whiteList   WhiteList @relation(fields: [whiteListId], references: [id])
  whiteListId Int       @unique
  status      NftStatus @relation(fields: [statusId], references: [id])
  statusId    Int
}

model WhiteList {
  id       Int      @id @default(autoincrement())
  person   Person   @relation(fields: [personID], references: [id])
  personID Int
  event    Event    @relation(fields: [eventID], references: [id])
  eventID  Int
  nftList  NftList?
}

model Event {
  id                     Int         @id @default(autoincrement())
  name                   String
  type                   EventType   @relation(fields: [typeId], references: [id])
  status                 EventStatus @relation(fields: [statusId], references: [id])
  urlCover               String?
  description            String?
  isSBT                  Boolean
  creatorID              Int
  started_at             DateTime?
  finished_at            DateTime?
  locationID             Int?
  // link to the ipfs
  nftIPFSurl             String      @unique
  collectionAddr         String?     @unique
  registeredParticipants Int         @default(0)
  countOfRewardTokens    Int
  created_at             DateTime    @default(now())
  updated_at             DateTime    @default(now())
  typeId                 Int         @default(1)
  statusId               Int         @default(1)
  WhiteList              WhiteList[]
  location               Location?   @relation(fields: [locationID], references: [id])
  creator                Person      @relation(fields: [creatorID], references: [id])
}

model NftStatus {
  id       Int       @id @default(autoincrement())
  status   String
  nftLists NftList[]
}

model EventType {
  id     Int     @id @default(autoincrement())
  type   String
  events Event[]
}

model EventStatus {
  id     Int     @id @default(autoincrement())
  status String
  events Event[]
}

model Location {
  id        Int     @id @default(autoincrement())
  addres    String?
  room      String?
  isOffline Boolean
  link      String?
  events    Event[]
}

// enum EventType {
//   HAKATON
//   CONFERENCE
//   MEETING
//   NOT_STATED
// }
//
// enum EventStatus {
//   CREATED
//   REGISTRATION_OPENED
//   REGISTRATION_CLOSED
//   FINISHED
// }
// enum NftStatus {
//   REGISTRED
//   IN_PROCESS
//   COMPLETED
// }
