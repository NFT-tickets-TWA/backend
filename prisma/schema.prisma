// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Person {
  id              Int               @id @default(autoincrement())
  walletAddress   String            @unique
  tgID            String            @unique
  roles           UserRole[]
  ParticipantList ParticipantList[]
  events          Event[]
}

model UserRole {
  id       Int    @id @default(autoincrement())
  person   Person @relation(fields: [personID], references: [id])
  personID Int
  role     Role   @relation(fields: [roleID], references: [id])
  roleID   Int
}

model Role {
  id    Int        @id @default(autoincrement())
  name  String
  roles UserRole[]
}

model ParticipantList {
  id       Int               @id @default(autoincrement())
  person   Person            @relation(fields: [personID], references: [id])
  personID Int
  event    Event             @relation(fields: [eventID], references: [id])
  eventID  Int
  status   ParticipantStatus @relation(fields: [statusID], references: [id])
  statusID Int               @default(1)

  @@unique([personID, eventID])
}

model Event {
  id                     Int               @id @default(autoincrement())
  name                   String
  type                   EventType         @relation(fields: [typeID], references: [id])
  status                 EventStatus       @relation(fields: [statusID], references: [id])
  urlCover               String?
  description            String?
  isSBT                  Boolean
  creatorID              Int
  startedAt              DateTime
  finishedAt             DateTime
  locationID             Int?
  // link to the ipfs
  nftIpfsUrl             String            @unique
  contractAddress        String?           @unique
  registeredParticipants Int               @default(0)
  countOfRewardTokens    Int
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @default(now())
  typeID                 Int               @default(1)
  statusID               Int               @default(1)
  approveLink            String?           @unique
  ParticipantList        ParticipantList[]
  location               Location?         @relation(fields: [locationID], references: [id])
  creator                Person            @relation(fields: [creatorID], references: [id])
}

model ParticipantStatus {
  id               Int               @id @default(autoincrement())
  status           String            @unique
  participantLists ParticipantList[]
}

model EventType {
  id     Int     @id @default(autoincrement())
  type   String
  events Event[]
}

model EventStatus {
  id     Int     @id @default(autoincrement())
  status String
  events Event[]
}

model Location {
  id        Int     @id @default(autoincrement())
  address   String?
  room      String?
  isOffline Boolean
  link      String?
  events    Event[]
}

// enum EventTypes {
//   HAKATON
//   CONFERENCE
//   MEETING
//   NOT_STATED
// }

//
// enum EventStatus {
//   CREATED
//   REGISTRATION_OPENED
//   REGISTRATION_CLOSED
//   FINISHED
// }
// enum PartisipantStatus {
//   REGISTRED
//   APPROVED
//   RECEIVED_NFT
// }
